###################################################-*- mode: shell-script -*-###
# Function "usage"

# NAME
#
# usage â€“ print a usage error and abort the shell script

# SYNOPSIS
#
# usage [-<N>] [--] <error-message>

# DESCRIPTION
#
# The "usage" function is a frontend to the "abort" function intended
# to signal an error in the usage of a command. It prints a misusage
# message on stderr and then aborts the shell script.
#
# The misusage message consists of the provided error message prefixed
# by the misused command and followed by the current stack trace. The
# the stack trace stops at the misused command; it does not include
# the calls to "usage" and/or "abort". Instead, the last listed call
# is the call to the misused command.
#
# Unless a different command was specified with the "-<N>" option, the
# misused command is the function that called "usage". If "usage" was
# called directly from the toplevel, the misused command is the shell
# script itself.
#
# For details on how the shell script is aborted, see the "abort"
# function.

# OPTIONS
#
# -<N>
#
#   Use the specified command as the misused command. The value "0"
#   stands for the function that called "usage", the value "1" for the
#   function that called that function, and so on. A value equal to
#   the call stack size at the point of the call to "usage" stands for
#   the shell script itself.
#
# --
#
#   Signal the end of options. Arguments following a "--" option are
#   treated as error messages.

function usage() {
  local misused_command_index=0;

  # Parse the options.
  local number="<->";
  while [[ $# -gt 0 ]]; do
    case $1 in
      -${~number} )
        local index_max=$(($#funcstack - 1));
        local valid_range="<0-$index_max>";
        [[ ${1#-} = ${~valid_range} ]] ||
          usage "Command index out of range 0..$index_max: ${(qqq)1#-}";
        misused_command_index=${1#-}; shift 1;
        ;;
      -- )
        shift 1; break;
        ;;
      -* )
        usage "Unrecognized option: ${(qqq)1}";
        ;;
      * )
        break;
        ;;
    esac;
  done;

  # Get the error message.
  [[ $# -lt 2 ]] || usage "A single error message is allowed, found: ${(j: :)${(qqq)@}}";
  [[ $# -eq 1 && -n $1 ]] || usage "A non-empty error message is required.";
  [[ $1 =~ [^[:space:]] ]] || usage "The error message cannot be whitespace only, found: ${(qqq)1}";
  local error_message=$1; shift 1;

  local skip_count=$((2 + $misused_command_index));
  local misused_command=${funcstack[$skip_count]:-$ZSH_ARGZERO};
  abort -$skip_count -- "$misused_command: $error_message";
}

################################################################################
