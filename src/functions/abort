###################################################-*- mode: shell-script -*-###
# Function "abort"

# NAME
#
# abort – abort the shell script

# SYNOPSIS
#
# abort [-<N> | -q] [-E | -e | -f] [--] [<message-part>…]

# DESCRIPTION
#
# The "abort" function prints the provided message and the current
# stack trace on stderr and then aborts the shell script.
#
# The default abortion mechanism terminates the whole shell script. A
# HUP signal is sent to the current shell process and all its parent
# shell processes up to the original shell process with PID $$. In the
# absence of custom traps, a HUP signal causes the shell process that
# receives it to exit with status 1. Thus, unlike the "exit" builtin,
# which only exits the (sub)shell from which it's called, the "abort"
# function terminates the whole shell script even when it's called
# from a subshell.
#
# The signal to send to the shell processes can be specified with the
# "ZABORT_SIGNAL" environment variable. Custom traps can be used to
# specify how to behave when a signal is received. Custom traps can be
# set either with the "trap" builtin or with "TRAP" functions.
#
# The set of shell processes to which a signal should be sent can be
# restricted with the "ZABORT_STOP_PID" environment variable. Thus,
# instead of terminating the whole shell script, it's possible to
# terminate only a subshell.
#
# The message is printed by default with the "echo" builtin and with
# the "printf" builtin if the "--printf" option was provided. The
# message parts are passed as is to "echo" or "printf". They may
# include options, in which case it may be necessary to use the "--"
# option to distinguish them from options to the "abort" function.
#
# If no message parts are provided, the message defaults to "Abort",
# unless the "--" option was provided, in which case no message is
# printed.

# OPTIONS
#
# -<N>
#
#   Skip the top N stack elements when printing the stack trace. This
#   can be useful to report an error in a calling function.
#
# -q
# --quiet
#
#   Don't print the stack trace.
#
# -E
# -e
#
#   Pass the "-E" or "-e" option to the "echo" builtin when printing
#   the message.
#
# -f
# --printf
#
#   Print the message with the "printf" builtin. Any "-E" or "-e"
#   options are ignored.
#
# --
#
#   Signal the end of options. Arguments following a "--" option are
#   treated as message parts.

# ENVIRONMENT
#
# ZABORT_SIGNAL
#
#   The signal to send to the shell processes. It can be specified by
#   name or number. Defaults to HUP.
#
# ZABORT_STOP_PID
#
#   The PID of the shell process at which the search for parent shell
#   processes to which to send a signal should stop. A signal is sent
#   to current shell process and all its parent shell processes up to
#   the shell process with PID $$ or $ZABORT_STOP_PID, whichever comes
#   first.

function abort() {
  local skip_count=0;
  local print_stack_trace=true;
  local signal=HUP;
  local echo_args=();
  local use_printf=false;
  local message_parts=("Abort");

  function _zabort-is-signal() {
    [[ $1 != <-> ]] || set -- "${signals[$1+1]:-}";
    [[ $1 != -* ]] && kill -l "$1" >/dev/null 2>&1;
  }

  if [[ -v ZABORT_SIGNAL ]]; then
    if _zabort-is-signal "$ZABORT_SIGNAL"; then
      signal=$ZABORT_SIGNAL;
    else
      echo "$0: ZABORT_SIGNAL contains unrecognized signal: ${(qqq)ZABORT_SIGNAL}" 1>&2;
    fi;
  fi;

  # Parse the options.
  local number="<->";
  while [[ $# -gt 0 ]]; do
    case $1 in
      -${~number} )
        local skip_max=$#funcstack;
        local valid_range="<0-$skip_max>";
        [[ ${1#-} = ${~valid_range} ]] ||
          usage "Valid skip count range from 0 to $skip_max, found: ${(qqq)1#-}.";
        skip_count=${1#-}; shift 1;
        ;;
      -q | --quiet )
        print_stack_trace=false; shift 1;
        ;;
      -E | -e )
        echo_args+=($1); shift 1;
        ;;
      -f | --printf )
        use_printf=true; shift 1;
        ;;
      -- )
        shift 1;
        message_parts=("$@"); shift $#;
        ;;
      -* )
        usage "Unrecognised option: ${(qqq)1}";
        ;;
      * )
        message_parts=("$@"); shift $#;
        ;;
    esac;
  done;

  # Print the message.
  if [[ $#message_parts -gt 0 ]]; then
    { $use_printf && printf "$message_parts[@]" || echo $echo_args "$message_parts[@]" } >&2;
  fi;

  # Print the stack trace.
  if $print_stack_trace && [[ $skip_count -lt $#funcstack ]]; then
    local i;
    for i in {$((1 + $skip_count))..$#funcstack}; do
      echo -E - "at $funcfiletrace[$i]($funcstack[$i])" >&2;
    done;
  fi;

  # Send a signal to the current shell process and its parent shell
  # processes.
  #
  # Sending the HUP signal to a shell process terminates it without
  # printing any message. Any commands following the kill command are
  # NOT executed. However, local function "EXIT" traps are run but not
  # global "EXIT" traps. Sending the ABRT or TERM signals have the
  # same effect but for them zsh prints an error message. The shell
  # exits with the status 1 for the HUP signal and with the statuses
  # 134 and 143 for the ABRT and TERM signals.

  zmodload zsh/system;
  # The check for PID 1 is needed in case a parent shell was orphaned
  # and reparented by the init process.
  local -a stop_pids=($$ 1 ${ZABORT_STOP_PID:-}) pids=();
  local -i pid=$sysparams[pid];
  for ((; !stop_pids[(I)$pid]; pid=$(ps -o ppid= $pid))) do pids+=$pid; done;
  ((pid == 1)) || pids+=$pid;
  kill -$signal $pids;
}

################################################################################
